<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.gym.mapper.SportsEquipmentMapper">

	<!-- sportsEquipment 추가  -->
	<insert id="insertSportsEquipment" parameterType="com.example.gym.vo.SportsEquipment">
	
		<selectKey order="AFTER" resultType="int" keyProperty="sportsEquipmentNo">
		SELECT last_insert_id();<!-- 제일 마지막에 입력된 키값을 받아옴 -->
		</selectKey>
		INSERT INTO sports_equipment(
				employee_no,
				item_name,
				item_price,
				createdate,
				updatedate
			)VALUES(
				#{employeeNo},
				#{itemName},
				#{itemPrice},
				NOW(),
				NOW()
			)
	</insert> 
	
	<!-- sportsEquipmentImg 추가  -->
	<insert id="insertSportsEquipmentImg" parameterType="com.example.gym.vo.SportsEquipmentImg">
	    INSERT INTO sports_equipment_img(
	        sports_equipment_no,
	        sports_equipment_img_origin_name,
	        sports_equipment_img_file_name,
	        sports_equipment_img_size,
	        sports_equipment_img_type,
	        createdate,
	        updatedate
	    ) VALUES (
	        #{sportsEquipmentNo},
	        #{sportsEquipmentImgOriginName},
	        #{sportsEquipmentImgFileName},
	        #{sportsEquipmentImgSize},
	        #{sportsEquipmentImgType},
	        NOW(),
	        NOW()
	    )
	</insert>
	
	<!-- sportsEquipment CRUD를 위해 본사소속 직원 확인하기  -->
	<select id="selectSearchEmployeeLevel" parameterType="int" resultType="int">
		SELECT 
			b.branch_level branchLevel
		FROM employee e 
		INNER JOIN branch b
		ON e.branch_no = b.branch_no
		WHERE employee_no = #{employeeNo}
	</select>

	<!-- sportsEquipment 목록 + 검색 + 페이징  -->
	<select id="selectSportsEquipmentByPage" parameterType="java.util.Map" resultType="java.util.Map">
	    SELECT 
	        se.sports_equipment_no sportsEquipmentNo,
	        se.item_name itemName,
	        se.item_price itemPrice,
	        se.equipment_active equipmentActive,
	        (SELECT sei.sports_equipment_img_file_name
	         FROM sports_equipment_img sei
	         WHERE sei.sports_equipment_no = se.sports_equipment_no
	         LIMIT 1 <!-- 리스트에서는 img를 하나만 가지고 오기위한 서브쿼리 -->
	        ) sportsEquipmentImgFileName
	    FROM sports_equipment se
	    <where>
	        <if test="searchWord != ''">
	            AND item_name LIKE CONCAT('%',#{searchWord},'%')
	        </if>
			<if test="equipmentActive != ''">
    			AND se.equipment_active = #{equipmentActive}
			</if>
	    </where>
	    ORDER BY se.createdate DESC
	    LIMIT #{beginRow}, #{rowPerPage}
	</select>
	
	<!-- lastPage 구하기 위한 sportsEquipment 수 -->
	<select id="selectSportsEquipmentCnt" parameterType="java.util.Map" resultType="int">
	    SELECT 
	        COUNT(sports_equipment_no)
	    FROM sports_equipment
	    <where>
	        <if test="searchWord != ''">
	            AND item_name LIKE CONCAT('%',#{searchWord},'%')
	        </if>
			<if test="equipmentActive != ''">
    			AND equipment_active = #{equipmentActive}
			</if>
	    </where>
	</select>
	
	<!--sportsEquipment 상세보기(정보)-->
	<select id="selectSportsEquipmentOne" parameterType="int" resultType="java.util.Map">
		SELECT 
			se.sports_equipment_no sportsEquipmentNo,
			e.employee_id employeeId,
			se.item_name itemName,
			se.item_price itemPrice,
			se.equipment_active equipmentActive,
			se.createdate equipmentCreatedate,
			se.updatedate equipmentUpdatedate
		FROM employee e 
		INNER JOIN sports_equipment se
		ON e.employee_no = se.employee_no
		WHERE se.sports_equipment_no = #{sportsEquipmentNo}
	</select>
	
	<!--sportsEquipment 상세보기(이미지)-->
	<select id="selectSportsEquipmentImgList" parameterType="int" resultType="com.example.gym.vo.SportsEquipmentImg">
		SELECT 
			sports_equipment_img_file_name sportsEquipmentImgFileName,
			sports_equipment_img_no sportsEquipmentImgNo
		FROM sports_equipment_img
		WHERE sports_equipment_no = #{sportsEquipmentNo}
	</select>
	
	<!--sportsEquipment 정보 수정-->
	<update id="updateSportsEquipment" parameterType="com.example.gym.vo.SportsEquipment">
		UPDATE sports_equipment
		SET 
			employee_no = #{employeeNo},
			item_name = #{itemName}, 
			item_price = #{itemPrice},
			equipment_active = #{equipmentActive},
			updatedate = NOW()
		WHERE sports_equipment_no = #{sportsEquipmentNo}
	</update>
	
	<!--sportsEquipmentImg 개별 삭제-->
	<delete id="deleteOneSportsEquipmentImg" parameterType="int">
		DELETE FROM sports_equipment_img
		WHERE sports_equipment_img_no = #{sportsEquipmentImgNo}
	</delete>
	
	<!-- sportsEquipmentOrder 추가  -->
	<insert id="insertSportsEquipmentOrder" parameterType="com.example.gym.vo.SportsEquipmentOrder">
		INSERT INTO sports_equipment_order(
				branch_no,
				sports_equipment_no,
				quantity,
				total_price
			)VALUES(
				#{branchNo},
				#{sportsEquipmentNo},
				#{quantity},
				#{totalPrice}
			)
	</insert> 
	
   <!-- sportsEquipmentOrder 리스트 + 지점검색 + 페이징 (본사)  -->
   <select id="selectSportsEquipmentOrderByHead" parameterType="java.util.Map" resultType="java.util.Map">
       SELECT 
           b.branch_name branchName,
           se.item_name itemName,
           se.item_price itemPrice,
           seo.quantity quantity,
           seo.order_no orderNo,
           seo.total_price totalPrice,
           seo.order_status orderStatus,
           seo.createdate createdate,
           seo.updatedate updatedate,
           (SELECT sei.sports_equipment_img_file_name
              FROM sports_equipment_img sei
              WHERE sei.sports_equipment_no = se.sports_equipment_no
              LIMIT 1) sportsEquipmentImgFileName
       FROM branch b
       INNER JOIN sports_equipment_order seo 
       ON b.branch_no = seo.branch_no
       INNER JOIN sports_equipment se 
       ON se.sports_equipment_no = seo.sports_equipment_no
       <where>
       		<!-- 본사 모든 order 리스트 -->
	        <if test="loginBranchLevel == 1">
	        	<if test="searchBranch != ''">
	                <!-- 본사 branchName으로 검색 -->
	                AND b.branch_name LIKE CONCAT('%',#{searchBranch},'%')
	            </if>
	            <if test="searchItem != ''">
	                <!-- 본사 itemName으로 검색 -->
	                AND se.item_name LIKE CONCAT('%',#{searchItem},'%')
	            </if>
	            <if test="beginDate != ''">
	                <!-- 본사 시작날짜로 검색 -->
	                AND seo.createdate >= #{beginDate}
	            </if>
	            <if test="endDate != ''">
	                <!-- 본사 시작날짜,끝날짜로 검색 -->
	                 <![CDATA[ AND seo.createdate <= #{endDate} ]]>
	            </if>
	        </if>
        </where>
       ORDER BY seo.createdate DESC
       LIMIT #{beginRow}, #{rowPerPage}
   </select>
	
	<!-- lastPage 구하기 위한 sportsEquipmentOrder 수 (본사) -->
	<select id="selectSportsEquipmentOrderHeadCnt" parameterType="java.util.Map" resultType="int">
		SELECT 
			COUNT(seo.order_no)
		FROM branch b
		INNER JOIN sports_equipment_order seo
		ON b.branch_no = seo.branch_no
		INNER JOIN sports_equipment se
		ON se.sports_equipment_no = seo.sports_equipment_no
    <where>
        <!-- 본사 모든 order 리스트 -->
        <if test="loginBranchLevel == 1">
         	<if test="searchBranch != ''">
                <!-- 본사 branchName으로 검색 -->
                AND b.branch_name LIKE CONCAT('%',#{searchBranch},'%')
            </if>
            <if test="searchItem != ''">
                <!-- 본사 itemName으로 검색 -->
                AND se.item_name LIKE CONCAT('%',#{searchItem},'%')
            </if>
            <if test="beginDate != ''">
                <!-- 본사 시작날짜로 검색 -->
                AND seo.createdate >= #{beginDate}
            </if>
            <if test="endDate != ''">
                <!-- 본사 시작날짜,끝날짜로 검색 -->
                 <![CDATA[ AND seo.createdate <= #{endDate} ]]>
           </if>
         </if>
    </where>
	</select>
	
   <!-- sportsEquipmentOrder 리스트 + 지점검색 + 페이징 (지점)  -->
   <select id="selectSportsEquipmentOrderByBranch" parameterType="java.util.Map" resultType="java.util.Map">
       SELECT 
           b.branch_name branchName,
           se.item_name itemName,
           se.item_price itemPrice,
           seo.quantity quantity,
           seo.order_no orderNo,
           seo.total_price totalPrice,
           seo.order_status orderStatus,
           seo.createdate createdate,
           seo.updatedate updatedate,
           (SELECT sei.sports_equipment_img_file_name
              FROM sports_equipment_img sei
              WHERE sei.sports_equipment_no = se.sports_equipment_no
              LIMIT 1) sportsEquipmentImgFileName
       FROM branch b
       INNER JOIN sports_equipment_order seo 
       ON b.branch_no = seo.branch_no
       INNER JOIN sports_equipment se 
       ON se.sports_equipment_no = seo.sports_equipment_no
       <where>
           <!-- 로그인한 계정의 소속 지점만 -->
           <if test="loginBranchLevel == 0">
               AND b.branch_no = #{loginBranchNo}
               <if test="searchItem != ''">
                   <!-- 지점 itemName으로 검색 -->
                   AND se.item_name LIKE CONCAT('%',#{searchItem},'%')
               </if>
               <if test="beginDate != ''">
                   <!-- 지점 시작날짜로 검색 -->
                   AND seo.createdate > #{beginDate}
               </if>
               <if test="endDate != ''">
                   <!-- 지점 시작날짜,끝날짜로 검색 -->
                   <![CDATA[ AND seo.createdate < #{endDate} ]]>
               </if>
           </if>
        </where>
       ORDER BY seo.createdate DESC
       LIMIT #{beginRow}, #{rowPerPage}
   </select>
	
	<!-- lastPage 구하기 위한 sportsEquipmentOrder 수 (지점) -->
	<select id="selectSportsEquipmentOrderBranchCnt" parameterType="java.util.Map" resultType="int">
		SELECT 
			COUNT(seo.order_no)
		FROM branch b
		INNER JOIN sports_equipment_order seo
		ON b.branch_no = seo.branch_no
		INNER JOIN sports_equipment se
		ON se.sports_equipment_no = seo.sports_equipment_no
    <where>
       	<!-- 로그인한 계정의 소속 지점만 -->
        <if test="loginBranchLevel == 0">
           AND b.branch_no = #{loginBranchNo}
           <if test="searchItem != ''">
            	<!-- 지점 itemName으로 검색 -->
            	AND se.item_name LIKE CONCAT('%',#{searchItem},'%')
           </if>
           <if test="beginDate != ''">
               	<!-- 지점 시작날짜로 검색 -->
                AND seo.createdate > #{beginDate}
           </if>
           <if test="endDate != ''">
                <!-- 지점 시작날짜,끝날짜로 검색 -->
                <![CDATA[ AND seo.createdate < #{endDate} ]]>
           </if>
       	</if>
    </where>
	</select>
	
	<!--sportsEquipmentOrder 상태 수정 (본사)-->
	<update id="updateSportsEquipmentOrder" parameterType="com.example.gym.vo.SportsEquipment">
		UPDATE sports_equipment_order
		SET 
			order_status = #{orderStatus},
			updatedate = NOW()
		WHERE order_no = #{orderNo}
	</update>
	
	<!--sportsEquipmentOrder 삭제 (지점)-->
	<delete id="deleteSportsEquipmentOrder" parameterType="com.example.gym.vo.SportsEquipment">
		DELETE FROM sports_equipment_order
		WHERE order_no = #{orderNo}
		AND order_status= '대기'
	</delete>
	
	<!-- sportsEquipmentInventory 출력 (본사) -->
	<select id="selectSportsEquipmentInventoryByHead" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT 
			b.branch_name branchName,
			se.item_name itemName,
			SUM(seo.quantity) AS totalQuantity,
			SUM(CASE WHEN seo.quantity > 0 THEN seo.quantity ELSE 0 END) AS inventoryQuantity,
   			<![CDATA[SUM(CASE WHEN seo.quantity < 0 THEN seo.quantity ELSE 0 END) AS discartdQuantity]]>
		FROM branch b INNER JOIN sports_equipment_order seo
		ON b.branch_no = seo.branch_no
		INNER JOIN sports_equipment se
		ON seo.sports_equipment_no = se.sports_equipment_no
		WHERE seo.order_status = '승인'
		<!-- 본사 모든 Inventory 리스트 -->
        <if test="loginBranchLevel == 1">
         	<if test="searchBranch != ''">
                <!-- 본사 branchName으로 검색 -->
                AND b.branch_name LIKE CONCAT('%',#{searchBranch},'%')
            </if>
            <if test="searchItem != ''">
                <!-- 본사 itemName으로 검색 -->
                AND se.item_name LIKE CONCAT('%',#{searchItem},'%')
            </if>
         </if>
		GROUP BY b.branch_name, se.item_name
		LIMIT #{beginRow}, #{rowPerPage}
	</select>
	
	<!-- sportsEquipmentInventory 출력 (지점) -->
	<select id="selectSportsEquipmentInventoryByBranch" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT 
			b.branch_name branchName,
			se.item_name itemName,
			SUM(seo.quantity) AS totalQuantity,
			SUM(CASE WHEN seo.quantity > 0 THEN seo.quantity ELSE 0 END) AS inventoryQuantity,
   			<![CDATA[SUM(CASE WHEN seo.quantity < 0 THEN seo.quantity ELSE 0 END) AS discartdQuantity]]>
		FROM branch b INNER JOIN sports_equipment_order seo
		ON b.branch_no = seo.branch_no
		INNER JOIN sports_equipment se
		ON seo.sports_equipment_no = se.sports_equipment_no
		WHERE seo.order_status = '승인'
       	<!-- 로그인한 계정의 소속 지점만 -->
        <if test="loginBranchLevel == 0">
           AND b.branch_no = #{loginBranchNo}
           <if test="searchItem != ''">
            	<!-- 지점 itemName으로 검색 -->
            	AND se.item_name LIKE CONCAT('%',#{searchItem},'%')
           </if>
       	</if>
		GROUP BY b.branch_name, se.item_name
		LIMIT #{beginRow}, #{rowPerPage}
	</select>
</mapper>