<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.gym.mapper.EmployeeMapper">
	<!-- 직원추가 시작 -->
	<!-- ID 중복체크 -->
	<select id="checkId" parameterType="com.example.gym.vo.Employee"
		resultType="com.example.gym.vo.Employee">
		SELECT
		    employee_id AS employeeId,
		FROM employee
		WHERE employee_id = #{employeeId}
	</select>
	<insert id="insertEmployee"
		parameterType="com.example.gym.vo.Employee">
		<selectKey order="AFTER" resultType="Integer"
			keyProperty="employeeNo">SELECT last_insert_id()</selectKey>
		INSERT INTO employee (
            branch_no ,
            employee_id ,
            employee_pw
		) VALUES (
            #{branchNo} ,
            #{employeeId} ,
            PASSWORD(#{employeePw})
		)
	</insert>
	<insert id="insertEmployeeDetail"
		parameterType="com.example.gym.vo.EmployeeDetail">
		INSERT INTO employee_detail (
            employee_no ,
            employee_name ,
            employee_phone ,
            employee_email ,
            employee_gender
		) VALUES (
            #{employeeNo} ,
            #{employeeName} ,
            #{employeePhone} ,
            #{employeeEmail} ,
            #{employeeGender}
		)
	</insert>
	<!-- empImg Insert -->
	<insert id="insertEmployeeImg"
		parameterType="com.example.gym.vo.EmployeeImg">
		INSERT INTO employee_img (
            employee_no,
            employee_img_origin_name
		) VALUES (
            #{employeeNo},
            #{employeeImgOriginName}
		)
	</insert>
	<!-- 직원추가 끝 -->
	<!-- 직원 퇴사시 정보 삭제 및 계정 비활성화 프로세스 -->
	<update id="updateEmployeeActive"
		parameterType="com.example.gym.vo.Employee">
		UPDATE employee SET
		employee_active = 'N',
		updatedate = NOW()
		WHERE employee_no = #{employeeNo}
	</update>

	<delete id="deleteEmployeeImg"
		parameterType="com.example.gym.vo.Employee">
		DELETE FROM employee_img
		WHERE employee_no =
		#{employeeNo}
	</delete>

	<delete id="deleteEmployeeDetail"
		parameterType="com.example.gym.vo.Employee">
		DELETE FROM employee_detail
		WHERE employee_no =
		#{employeeNo}
	</delete>
	<!-- 직원 퇴사시 정보 삭제 및 계정 비활성화 프로세스 끝 -->
	
	<!-- 로그인 -->
	<select id="loginEmployee"
		parameterType="com.example.gym.vo.Employee"
		resultType="com.example.gym.vo.Employee">
		SELECT
		e.employee_no employeeNo ,
		e.employee_id employeeId ,
		e.employee_active employeeActive,
		e.branch_no branchNo ,
		b.branch_level branchLevel ,
		b.branch_name branchName  
		FROM employee e
		INNER JOIN branch b ON
		e.branch_no = b.branch_no 
		WHERE e.employee_id = #{employeeId}
		AND
		e.employee_pw = PASSWORD(#{employeePw})
		AND e.employee_active = 'Y'
	</select>

	<!-- 관리자 목록 -->
	<select id="list" parameterType="com.example.gym.vo.Page"
				resultType="com.example.gym.vo.EmployeeForm">
		SELECT
		e.employee_no AS employeeNo,
		e.branch_no AS branchNo,
		e.employee_id AS employeeId,
		b.branch_name AS branchName ,
		DATE_FORMAT(e.createdate, '%Y-%m-%d') AS createdate ,
		
		ed.employee_name AS employeeName,
		ed.employee_gender AS employeeGender,
		ed.employee_phone AS employeePhone,
		ed.employee_email AS employeeEmail,

		ei.employee_img_no AS employeeImgNo,
		ei.employee_img_origin_name AS employeeImgOriginName
		FROM
		employee e 
		INNER JOIN branch b
		ON e.branch_no = b.branch_no
		LEFT OUTER JOIN employee_detail ed
		ON e.employee_no = ed.employee_no
		LEFT OUTER JOIN employee_img ei
		ON e.employee_no = ei.employee_no
		WHERE e.employee_active='Y'
		ORDER BY createdate DESC
		LIMIT #{beginRow}, #{rowPerPage}
	</select>
	<!--  전체 관리자 수 조회를 위한 쿼리 -->
	<select id="selectEmployeeTotal"
			resultType="int">
		SELECT
			COUNT(*)
		FROM
			employee
		WHERE employee_active='Y'
	</select>
	<!-- 상세정보/이미지 -> 마이페이지  -->
	<select id="getEmployee" parameterType="com.example.gym.vo.Employee"
										resultType="java.util.Map">
		SELECT
			e.employee_no AS employeeNo,
			e.employee_id AS employeeId,
			e.employee_active AS employeeActive,
			DATE_FORMAT(e.createdate, '%Y-%m-%d') AS createdate ,
			
			b.branch_name AS branchName ,
			
			ed.employee_name AS employeeName,
			ed.employee_gender AS employeeGender,
			ed.employee_phone AS employeePhone,
			ed.employee_email AS employeeEmail,
	
			ei.employee_img_no AS employeeImgNo,
			ei.employee_img_origin_name AS employeeImgSrc
		FROM employee e 
			INNER JOIN branch b
				ON e.branch_no = b.branch_no
			LEFT OUTER JOIN employee_detail ed
				ON e.employee_no = ed.employee_no
			LEFT OUTER JOIN employee_img ei
				ON e.employee_no = ei.employee_no
		WHERE e.employee_no = #{employeeNo}
	</select>
	
	<!-- 수정 프로세스 시작 -->
		<!-- 상세정보 변경 -->
	<update id="updateEmployeeOne" parameterType="com.example.gym.vo.EmployeeDetail">
		UPDATE employee_detail SET
			employee_name = #{employeeName},
			employee_gender = #{employeeGender},
			employee_phone = #{employeePhone},
			employee_email = #{employeeEmail},
			updatedate = NOW()
		WHERE employee_no = #{employeeNo}
	</update>
		<!-- 이미지 변경 -->
	<update id="updateEmployeeImg" parameterType="com.example.gym.vo.EmployeeImg">
		UPDATE employee_img SET
			employee_img_origin_name = #{employeeImgOriginName} ,
			updatedate = NOW()
		WHERE employee_no = #{employeeNo}
	</update>
		<!-- Img 변경 위한 정보조회 -->
	<select id="checkEmployeeImg" parameterType="com.example.gym.vo.Employee"
									resultType="com.example.gym.vo.EmployeeImg">
		SELECT
			employee_img_no AS employeeImgNo,
			employee_no AS employeeNo,
			employee_img_origin_name AS employeeImgOriginName
			createdate, updatedate
		FROM employee_img
			WHERE employee_no = #{employeeNo}
	</select>
		<!-- 비밀번호 변경 -->
	<update id="updateEmployeePw" parameterType="com.example.gym.vo.Employee">
		UPDATE employee SET
			employee_pw = SHA2(#{employeePw}, 256),
			updatedate = now()
		WHERE employee_no = #{employeeNo}
	</update>
	<!-- 수정 프로세스 종료 -->

    <select id="selectAllEmployeeImage" resultType="String">
        SELECT img.employee_img_origin_name
        FROM employee_img img
            INNER JOIN employee ON img.employee_no = employee.employee_no
        WHERE employee.employee_active = 'Y'
            AND img.employee_img_origin_name IS NOT NULL
    </select>
</mapper>